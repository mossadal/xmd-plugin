<?php namespace Mossadal\ExtendMarkdown;

use Backend;
use Controller;
use System\Classes\PluginBase;
use October\Rain\Support\MarkdownData;
use Mossadal\ExtendMarkdown\Models\Rule;
use Mossadal\ExtendMarkdown\Classes\Hooks;
use System\Classes\SettingsManager;
use Event;

/**
 * ExtendMarkdown Plugin Information File
 */
class Plugin extends PluginBase
{

    /**
     * Returns information about this plugin.
     *
     * @return array
     */
    public function pluginDetails()
    {
        return [
            'name'        => 'mossadal.extendmarkdown::lang.plugin.name',
            'description' => 'mossadal.extendmarkdown::lang.plugin.description',
            'author'      => 'Frank WikstrÃ¶m, Mossadal konsult och design AB',
            'icon'        => 'icon-user-md'
        ];
    }


    public function boot()
    {

        Event::listen('markdown.beforeParse', function($data) {
            Hooks::preMarkdownHook($data);
        });

        Event::listen('markdown.parse', function($original, $data) {
            Hooks::postMarkdownHook($original, $data);
        });
    }


    /**
     * Filter to apply the replacement rules specified in the plugin page.
     * By default, the database is seeded with some rules to handle
     * Parsedown/MathJax conflicts.
     * @param string $text The text to parse using Parsedown together with the user defined shortcuts
     * @return string Html generated by the parser
     */
    public function xmd($text)
    {
        $data = new MarkdownData($text);

        Hooks::preMarkdownhook($data);
        Hooks::postMarkdownhook($text, $data);

        return $data->text;
    }

    public function registerPermissions()
    {
        return [
            'mossadal.extendmarkdown.settings' => [
                'tab' => 'ExtendMarkdown Plugin',
                'label' => 'Access Settings'
            ],
        ];
    }

    /**
     * Register the extended Markdown parser as a Twig filter.
     *
     * @return void
     */
    public function registerMarkupTags()
    {
        return [
            'filters' => [
                'xmd' => [$this, 'xmd']
            ]
        ];
    }

    /**
     * Define the backend menus
     * @return void
     */
    public function registerSettings()
    {
        return [
            'definitions' => [
                'label'     => 'mossadal.extendmarkdown::lang.navigation.label',
                'description' => 'mossadal.extendmarkdown::lang.navigation.description',
                'url'       => Backend::url('mossadal/extendmarkdown/rule'),
                'icon'      => 'icon-user-md',
                'order'     => 700,
                'category'  => SettingsManager::CATEGORY_CMS,
                'permissions' => ['mossadal.extendmarkdown.settings']
            ]
        ];
    }

}
